"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeewMeew = void 0;
const utils_1 = require("./utils");
const axios_1 = __importDefault(require("axios"));
const fs_extra_1 = require("fs-extra");
class MeewMeew {
    constructor(Apikey) {
        this.apikey = Apikey;
    }
    writeFile(data, path, resolve, reject) {
        (0, fs_extra_1.writeFile)(path, Buffer.from(data), function (error) {
            if (error) {
                reject(error);
            }
            else {
                resolve('success');
            }
        });
    }
    checkPath(path, callback) {
        let pathType = (0, utils_1.getType)(path);
        switch (pathType) {
            case 'String':
                callback({ isPath: true, });
                break;
            case 'Undefined':
                callback({ isPath: false });
                break;
            default:
                throw new Error('Invalid argument');
        }
    }
    checkError(data) {
        if (data.error) {
            throw new Error(data.error);
        }
        else {
            return data;
        }
    }
    accountInfo() {
        var apikey = this.apikey;
        return new Promise(function (resolve, reject) {
            axios_1.default.get(`${utils_1.apiUrl}/account/info`, {
                params: {
                    apikey: apikey
                }
            }).then(function ({ data }) {
                resolve(data);
            }).catch(function (error) {
                reject(error);
            });
        });
    }
    covidInfo() {
        var apikey = this.apikey;
        return new Promise(function (resolve, reject) {
            axios_1.default.get(`${utils_1.apiUrl}/covid`, {
                params: {
                    apikey: apikey
                }
            }).then(function ({ data }) {
                resolve(data);
            }).catch(function (error) {
                reject(error);
            });
        });
    }
    randomImage(imageType, path) {
        let { checkPath, writeFile, checkError, apikey } = this;
        return new Promise(function (resolve, reject) {
            axios_1.default.get(`${utils_1.apiUrl}/image/${imageType}`, {
                params: {
                    apikey: apikey
                }
            }).then(function ({ data }) {
                var check = checkError(data);
                checkPath(path, function (result) {
                    if (result.isPath === true) {
                        writeFile(check.data, path, resolve, reject);
                    }
                    else {
                        resolve(check.data);
                    }
                });
            }).catch(function (error) {
                reject(error);
            });
        });
    }
    facebookAvatar(userId, path) {
        var apikey = this.apikey;
        let { checkPath, writeFile } = this;
        return new Promise(function (resolve, reject) {
            axios_1.default.get(`${utils_1.apiUrl}/avatar/${userId}`, {
                params: {
                    apikey: apikey
                }
            }).then(function ({ data }) {
                checkPath(path, function (result) {
                    if (result.isPath === true) {
                        writeFile(data, path, resolve, reject);
                    }
                    else {
                        resolve(data);
                    }
                });
            }).catch(function (error) {
                reject(error);
            });
        });
    }
    tiktokVideoNoWatermark(tiktokUrl) {
        var { checkError, apikey } = this;
        return new Promise(function (resolve, reject) {
            axios_1.default.get(`${utils_1.apiUrl}/tiktok/api`, {
                params: {
                    url: encodeURIComponent(tiktokUrl),
                    apikey: apikey
                }
            }).then(function ({ data }) {
                let check = checkError(data);
                resolve(check);
            }).catch(function (error) {
                reject(error);
            });
        });
    }
    linkWord(text, lang = 'vi') {
        var { checkError, apikey } = this;
        return new Promise(function (resolve, reject) {
            axios_1.default.get(`${utils_1.apiUrl}/word/linkword`, {
                params: {
                    ask: encodeURIComponent(text),
                    lang: lang,
                    apikey: apikey
                }
            }).then(function ({ data }) {
                let check = checkError(data);
                resolve(check);
            }).catch(function (error) {
                reject(error);
            });
        });
    }
    arrangeWord(level = 'random') {
        var { checkError, apikey } = this;
        return new Promise(function (resolve, reject) {
            axios_1.default.get(`${utils_1.apiUrl}/word/rw`, {
                params: {
                    level: level,
                    apikey: apikey
                }
            }).then(function ({ data }) {
                let check = checkError(data);
                resolve(check);
            }).catch(function (error) {
                reject(error);
            });
        });
    }
    chatWithSimsimi(askText) {
        var { checkError, apikey } = this;
        return new Promise(function (resolve, reject) {
            axios_1.default.get(`${utils_1.apiUrl}/simsimi/api`, {
                params: {
                    ask: encodeURIComponent(askText),
                    apikey: apikey
                }
            }).then(function ({ data }) {
                let check = checkError(data);
                resolve(check);
            }).catch(function (error) {
                reject(error);
            });
        });
    }
    teachSimsimi(ask, answer) {
        var { checkError, apikey } = this;
        return new Promise(function (resolve, reject) {
            axios_1.default.post(`${utils_1.apiUrl}/simsimi/teach`, {
                params: {
                    ask: encodeURIComponent(ask),
                    answer: encodeURIComponent(answer),
                    apikey: apikey
                }
            }).then(function ({ data }) {
                let check = checkError(data);
                resolve(check);
            }).catch(function (error) {
                reject(error);
            });
        });
    }
    lotteryToday(where = 'all') {
        var { checkError, apikey } = this;
        return new Promise(function (resolve, reject) {
            axios_1.default.get(`${utils_1.apiUrl}/lottery/${where}`, {
                params: {
                    apikey: apikey
                }
            }).then(function ({ data }) {
                let check = checkError(data);
                resolve(check);
            }).catch(function (error) {
                reject(error);
            });
        });
    }
}
exports.MeewMeew = MeewMeew;
